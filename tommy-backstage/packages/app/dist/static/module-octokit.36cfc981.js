"use strict";(()=>{var ss=Object.defineProperty;var ts=(C,O,G)=>O in C?ss(C,O,{enumerable:!0,configurable:!0,writable:!0,value:G}):C[O]=G;var z=(C,O,G)=>(ts(C,typeof O!="symbol"?O+"":O,G),G),Dr=(C,O,G)=>{if(!O.has(C))throw TypeError("Cannot "+G)};var t=(C,O,G)=>(Dr(C,O,"read from private field"),G?G.call(C):O.get(C)),A=(C,O,G)=>{if(O.has(C))throw TypeError("Cannot add the same private member more than once");O instanceof WeakSet?O.add(C):O.set(C,G)},b=(C,O,G,K)=>(Dr(C,O,"write to private field"),K?K.call(C,G):O.set(C,G),G),Pr=(C,O,G,K)=>({set _(x){b(C,O,x,G)},get _(){return t(C,O,K)}}),w=(C,O,G)=>(Dr(C,O,"access private method"),G);(self.webpackChunkapp=self.webpackChunkapp||[]).push([[1410],{72872:(C,O,G)=>{var $r,ar,Te,le,Se,Ee,lr,N,we,M,q,y,oe,pe,se,Y,fe,Z,De,Ce,_e,Pe,xe,ae,Er,Cr,Qe,Ie,wr,ue,Ar,xr,er,pr,fr,Oe,Be,Re,He,_r,Ir,ur,Or,dr,Rr,L,W,br,Lr,rr,Gr;G.d(O,{i:()=>rs});var K=G(7502),x=G(31765),be=G(23531),ie=G.n(be),je=G(29717),qe="2.0.6";function ge(r){const e=r.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(e.baseUrl)?"https://github.com":e.baseUrl.replace("/api/v3","")}async function Ge(r,e,s){const o={baseUrl:ge(r),headers:{accept:"application/json"},...s},n=await r(e,o);if("error"in n.data){const i=new je.L(`${n.data.error_description} (${n.data.error}, ${n.data.error_uri})`,400,{request:r.endpoint.merge(e,o),headers:n.headers});throw i.response=n,i}return n}function We({request:r=defaultRequest,...e}){const s=ge(r);return oauthAuthorizationUrl({...e,baseUrl:s})}async function re(r){const e=r.request||x.W,s=await Ge(e,"POST /login/oauth/access_token",{client_id:r.clientId,client_secret:r.clientSecret,code:r.code,redirect_uri:r.redirectUrl}),o={clientType:r.clientType,clientId:r.clientId,clientSecret:r.clientSecret,token:s.data.access_token,scopes:s.data.scope.split(/\s+/).filter(Boolean)};if(r.clientType==="github-app"){if("refresh_token"in s.data){const n=new Date(s.headers.date).getTime();o.refreshToken=s.data.refresh_token,o.expiresAt=ce(n,s.data.expires_in),o.refreshTokenExpiresAt=ce(n,s.data.refresh_token_expires_in)}delete o.scopes}return{...s,authentication:o}}function ce(r,e){return new Date(r+e*1e3).toISOString()}async function ke(r){const e=r.request||x.W,s={client_id:r.clientId};return"scopes"in r&&Array.isArray(r.scopes)&&(s.scope=r.scopes.join(" ")),Ge(e,"POST /login/device/code",s)}async function he(r){const e=r.request||x.W,s=await Ge(e,"POST /login/oauth/access_token",{client_id:r.clientId,device_code:r.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),o={clientType:r.clientType,clientId:r.clientId,token:s.data.access_token,scopes:s.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in r&&(o.clientSecret=r.clientSecret),r.clientType==="github-app"){if("refresh_token"in s.data){const n=new Date(s.headers.date).getTime();o.refreshToken=s.data.refresh_token,o.expiresAt=ye(n,s.data.expires_in),o.refreshTokenExpiresAt=ye(n,s.data.refresh_token_expires_in)}delete o.scopes}return{...s,authentication:o}}function ye(r,e){return new Date(r+e*1e3).toISOString()}async function Ae(r){const s=await(r.request||x.W)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${ie()(`${r.clientId}:${r.clientSecret}`)}`},client_id:r.clientId,access_token:r.token}),o={clientType:r.clientType,clientId:r.clientId,clientSecret:r.clientSecret,token:r.token,scopes:s.data.scopes};return s.data.expires_at&&(o.expiresAt=s.data.expires_at),r.clientType==="github-app"&&delete o.scopes,{...s,authentication:o}}async function Ve(r){const e=r.request||x.W,s=await Ge(e,"POST /login/oauth/access_token",{client_id:r.clientId,client_secret:r.clientSecret,grant_type:"refresh_token",refresh_token:r.refreshToken}),o=new Date(s.headers.date).getTime(),n={clientType:"github-app",clientId:r.clientId,clientSecret:r.clientSecret,token:s.data.access_token,refreshToken:s.data.refresh_token,expiresAt:sr(o,s.data.expires_in),refreshTokenExpiresAt:sr(o,s.data.refresh_token_expires_in)};return{...s,authentication:n}}function sr(r,e){return new Date(r+e*1e3).toISOString()}async function kr(r){const{request:e,clientType:s,clientId:o,clientSecret:n,token:i,...l}=r,h=await(e||defaultRequest7)("POST /applications/{client_id}/token/scoped",{headers:{authorization:`basic ${btoa2(`${o}:${n}`)}`},client_id:o,access_token:i,...l}),D=Object.assign({clientType:s,clientId:o,clientSecret:n,token:h.data.token},h.data.expires_at?{expiresAt:h.data.expires_at}:{});return{...h,authentication:D}}async function gr(r){const e=r.request||x.W,s=ie()(`${r.clientId}:${r.clientSecret}`),o=await e("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${s}`},client_id:r.clientId,access_token:r.token}),n={clientType:r.clientType,clientId:r.clientId,clientSecret:r.clientSecret,token:o.data.token,scopes:o.data.scopes};return o.data.expires_at&&(n.expiresAt=o.data.expires_at),r.clientType==="github-app"&&delete n.scopes,{...o,authentication:n}}async function tr(r){const e=r.request||x.W,s=ie()(`${r.clientId}:${r.clientSecret}`);return e("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${s}`},client_id:r.clientId,access_token:r.token})}async function or(r){const e=r.request||x.W,s=ie()(`${r.clientId}:${r.clientSecret}`);return e("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${s}`},client_id:r.clientId,access_token:r.token})}async function Ue(r,e){const s=hr(r,e.auth);if(s)return s;const{data:o}=await ke({clientType:r.clientType,clientId:r.clientId,request:e.request||r.request,scopes:e.auth.scopes||r.scopes});await r.onVerification(o);const n=await Me(e.request||r.request,r.clientId,r.clientType,o);return r.authentication=n,n}function hr(r,e){if(e.refresh===!0||!r.authentication)return!1;if(r.clientType==="github-app")return r.authentication;const s=r.authentication,o=("scopes"in e&&e.scopes||r.scopes).join(" "),n=s.scopes.join(" ");return o===n?s:!1}async function Ne(r){await new Promise(e=>setTimeout(e,r*1e3))}async function Me(r,e,s,o){try{const n={clientId:e,request:r,code:o.device_code},{authentication:i}=s==="oauth-app"?await he({...n,clientType:"oauth-app"}):await he({...n,clientType:"github-app"});return{type:"token",tokenType:"oauth",...i}}catch(n){if(!n.response)throw n;const i=n.response.data.error;if(i==="authorization_pending")return await Ne(o.interval),Me(r,e,s,o);if(i==="slow_down")return await Ne(o.interval+5),Me(r,e,s,o);throw n}}async function mr(r,e){return Ue(r,{auth:e})}async function Ke(r,e,s,o){let n=e.endpoint.merge(s,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return e(n);const{token:i}=await Ue(r,{request:e,auth:{type:"oauth"}});return n.headers.authorization=`token ${i}`,e(n)}var nr="4.0.5";function ve(r){const e=r.request||x.W.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${nr} ${(0,K.i)()}`}}),{request:s=e,...o}=r,n=r.clientType==="github-app"?{...o,clientType:"github-app",request:s}:{...o,clientType:"oauth-app",request:s,scopes:r.scopes||[]};if(!r.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!r.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(mr.bind(null,n),{hook:Ke.bind(null,n)})}var Tr="2.1.2";async function ir(r){if("code"in r.strategyOptions){const{authentication:e}=await re({clientId:r.clientId,clientSecret:r.clientSecret,clientType:r.clientType,onTokenCreated:r.onTokenCreated,...r.strategyOptions,request:r.request});return{type:"token",tokenType:"oauth",...e}}if("onVerification"in r.strategyOptions){const s=await ve({clientType:r.clientType,clientId:r.clientId,onTokenCreated:r.onTokenCreated,...r.strategyOptions,request:r.request})({type:"oauth"});return{clientSecret:r.clientSecret,...s}}if("token"in r.strategyOptions)return{type:"token",tokenType:"oauth",clientId:r.clientId,clientSecret:r.clientSecret,clientType:r.clientType,onTokenCreated:r.onTokenCreated,...r.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function Je(r,e={}){var o,n;if(r.authentication||(r.authentication=r.clientType==="oauth-app"?await ir(r):await ir(r)),r.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const s=r.authentication;if("expiresAt"in s&&(e.type==="refresh"||new Date(s.expiresAt)<new Date)){const{authentication:i}=await Ve({clientType:"github-app",clientId:r.clientId,clientSecret:r.clientSecret,refreshToken:s.refreshToken,request:r.request});r.authentication={tokenType:"oauth",type:"token",...i}}if(e.type==="refresh"){if(r.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!s.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing");await((o=r.onTokenCreated)==null?void 0:o.call(r,r.authentication,{type:e.type}))}if(e.type==="check"||e.type==="reset"){const i=e.type==="check"?Ae:gr;try{const{authentication:l}=await i({clientType:r.clientType,clientId:r.clientId,clientSecret:r.clientSecret,token:r.authentication.token,request:r.request});return r.authentication={tokenType:"oauth",type:"token",...l},e.type==="reset"&&await((n=r.onTokenCreated)==null?void 0:n.call(r,r.authentication,{type:e.type})),r.authentication}catch(l){throw l.status===404&&(l.message="[@octokit/auth-oauth-user] Token is invalid",r.authentication.invalid=!0),l}}if(e.type==="delete"||e.type==="deleteAuthorization"){const i=e.type==="delete"?tr:or;try{await i({clientType:r.clientType,clientId:r.clientId,clientSecret:r.clientSecret,token:r.authentication.token,request:r.request})}catch(l){if(l.status!==404)throw l}return r.authentication.invalid=!0,r.authentication}return r.authentication}var ze=/\/applications\/[^/]+\/(token|grant)s?/;function $e(r){return r&&ze.test(r)}async function Ye(r,e,s,o={}){const n=e.endpoint.merge(s,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return e(n);if($e(n.url)){const l=ie()(`${r.clientId}:${r.clientSecret}`);return n.headers.authorization=`basic ${l}`,e(n)}const{token:i}=r.clientType==="oauth-app"?await Je({...r,request:e}):await Je({...r,request:e});return n.headers.authorization="token "+i,e(n)}function Xe({clientId:r,clientSecret:e,clientType:s="oauth-app",request:o=x.W.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${Tr} ${(0,K.i)()}`}}),onTokenCreated:n,...i}){const l=Object.assign({clientType:s,clientId:r,clientSecret:e,onTokenCreated:n,strategyOptions:i,request:o});return Object.assign(Je.bind(null,l),{hook:Ye.bind(null,l)})}Xe.VERSION=Tr;async function c(r,e){if(e.type==="oauth-app")return{type:"oauth-app",clientId:r.clientId,clientSecret:r.clientSecret,clientType:r.clientType,headers:{authorization:`basic ${ie()(`${r.clientId}:${r.clientSecret}`)}`}};if("factory"in e){const{type:n,...i}={...e,...r};return e.factory(i)}const s={clientId:r.clientId,clientSecret:r.clientSecret,request:r.request,...e};return(r.clientType==="oauth-app"?await Xe({...s,clientType:r.clientType}):await Xe({...s,clientType:r.clientType}))()}async function g(r,e,s,o){let n=e.endpoint.merge(s,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return e(n);if(r.clientType==="github-app"&&!$e(n.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${n.method} ${n.url}" is not supported.`);const i=ie()(`${r.clientId}:${r.clientSecret}`);n.headers.authorization=`basic ${i}`;try{return await e(n)}catch(l){throw l.status!==401||(l.message=`[@octokit/auth-oauth-app] "${n.method} ${n.url}" does not support clientId/clientSecret basic authentication.`),l}}var p="5.0.6";function E(r){const e=Object.assign({request:x.W.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${p} ${(0,K.i)()}`}}),clientType:"oauth-app"},r);return Object.assign(c.bind(null,e),{hook:g.bind(null,e)})}var T=G(91346),j=G(6990),k=G(34406);const v=typeof performance=="object"&&performance&&typeof performance.now=="function"?performance:Date,a=new Set,d=typeof k=="object"&&k?k:{},u=(r,e,s,o)=>{typeof d.emitWarning=="function"?d.emitWarning(r,e,s,o):console.error(`[${s}] ${e}: ${r}`)};let f=globalThis.AbortController,_=globalThis.AbortSignal;if(typeof f=="undefined"){_=class{constructor(){z(this,"onabort");z(this,"_onabort",[]);z(this,"reason");z(this,"aborted",!1)}addEventListener(o,n){this._onabort.push(n)}},f=class{constructor(){z(this,"signal",new _);e()}abort(o){var n,i;if(!this.signal.aborted){this.signal.reason=o,this.signal.aborted=!0;for(const l of this.signal._onabort)l(o);(i=(n=this.signal).onabort)==null||i.call(n,o)}}};let r=(($r=d.env)==null?void 0:$r.LRU_CACHE_IGNORE_AC_WARNING)!=="1";const e=()=>{r&&(r=!1,u("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",e))}}const U=r=>!a.has(r),S=Symbol("type"),I=r=>r&&r===Math.floor(r)&&r>0&&isFinite(r),X=r=>I(r)?r<=Math.pow(2,8)?Uint8Array:r<=Math.pow(2,16)?Uint16Array:r<=Math.pow(2,32)?Uint32Array:r<=Number.MAX_SAFE_INTEGER?J:null:null;class J extends Array{constructor(e){super(e),this.fill(0)}}const cr=class{constructor(e,s){z(this,"heap");z(this,"length");if(!t(cr,ar))throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new s(e),this.length=0}static create(e){const s=X(e);if(!s)return[];b(cr,ar,!0);const o=new cr(e,s);return b(cr,ar,!1),o}push(e){this.heap[this.length++]=e}pop(){return this.heap[--this.length]}};let me=cr;ar=new WeakMap,A(me,ar,!1);const Fr=class{constructor(e){A(this,Er);A(this,Ar);A(this,Oe);A(this,Re);A(this,_r);A(this,ur);A(this,dr);A(this,L);A(this,br);A(this,rr);A(this,Te,void 0);A(this,le,void 0);A(this,Se,void 0);A(this,Ee,void 0);A(this,lr,void 0);z(this,"ttl");z(this,"ttlResolution");z(this,"ttlAutopurge");z(this,"updateAgeOnGet");z(this,"updateAgeOnHas");z(this,"allowStale");z(this,"noDisposeOnSet");z(this,"noUpdateTTL");z(this,"maxEntrySize");z(this,"sizeCalculation");z(this,"noDeleteOnFetchRejection");z(this,"noDeleteOnStaleGet");z(this,"allowStaleOnFetchAbort");z(this,"allowStaleOnFetchRejection");z(this,"ignoreFetchAbort");A(this,N,void 0);A(this,we,void 0);A(this,M,void 0);A(this,q,void 0);A(this,y,void 0);A(this,oe,void 0);A(this,pe,void 0);A(this,se,void 0);A(this,Y,void 0);A(this,fe,void 0);A(this,Z,void 0);A(this,De,void 0);A(this,Ce,void 0);A(this,_e,void 0);A(this,Pe,void 0);A(this,xe,void 0);A(this,ae,void 0);A(this,Qe,()=>{});A(this,Ie,()=>{});A(this,wr,()=>{});A(this,ue,()=>!1);A(this,er,e=>{});A(this,pr,(e,s,o)=>{});A(this,fr,(e,s,o,n)=>{if(o||n)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0});const{max:s=0,ttl:o,ttlResolution:n=1,ttlAutopurge:i,updateAgeOnGet:l,updateAgeOnHas:m,allowStale:h,dispose:D,disposeAfter:B,noDisposeOnSet:R,noUpdateTTL:Q,maxSize:ne=0,maxEntrySize:de=0,sizeCalculation:P,fetchMethod:$,noDeleteOnFetchRejection:F,noDeleteOnStaleGet:H,allowStaleOnFetchRejection:ee,allowStaleOnFetchAbort:V,ignoreFetchAbort:te}=e;if(s!==0&&!I(s))throw new TypeError("max option must be a nonnegative integer");const Le=s?X(s):Array;if(!Le)throw new Error("invalid max value: "+s);if(b(this,Te,s),b(this,le,ne),this.maxEntrySize=de||t(this,le),this.sizeCalculation=P,this.sizeCalculation){if(!t(this,le)&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if(typeof this.sizeCalculation!="function")throw new TypeError("sizeCalculation set to non-function")}if($!==void 0&&typeof $!="function")throw new TypeError("fetchMethod must be a function if specified");if(b(this,lr,$),b(this,xe,!!$),b(this,M,new Map),b(this,q,new Array(s).fill(void 0)),b(this,y,new Array(s).fill(void 0)),b(this,oe,new Le(s)),b(this,pe,new Le(s)),b(this,se,0),b(this,Y,0),b(this,fe,me.create(s)),b(this,N,0),b(this,we,0),typeof D=="function"&&b(this,Se,D),typeof B=="function"?(b(this,Ee,B),b(this,Z,[])):(b(this,Ee,void 0),b(this,Z,void 0)),b(this,Pe,!!t(this,Se)),b(this,ae,!!t(this,Ee)),this.noDisposeOnSet=!!R,this.noUpdateTTL=!!Q,this.noDeleteOnFetchRejection=!!F,this.allowStaleOnFetchRejection=!!ee,this.allowStaleOnFetchAbort=!!V,this.ignoreFetchAbort=!!te,this.maxEntrySize!==0){if(t(this,le)!==0&&!I(t(this,le)))throw new TypeError("maxSize must be a positive integer if specified");if(!I(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");w(this,Ar,xr).call(this)}if(this.allowStale=!!h,this.noDeleteOnStaleGet=!!H,this.updateAgeOnGet=!!l,this.updateAgeOnHas=!!m,this.ttlResolution=I(n)||n===0?n:1,this.ttlAutopurge=!!i,this.ttl=o||0,this.ttl){if(!I(this.ttl))throw new TypeError("ttl must be a positive integer if specified");w(this,Er,Cr).call(this)}if(t(this,Te)===0&&this.ttl===0&&t(this,le)===0)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!t(this,Te)&&!t(this,le)){const Fe="LRU_CACHE_UNBOUNDED";U(Fe)&&(a.add(Fe),u("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",Fe,Fr))}}static unsafeExposeInternals(e){return{starts:t(e,Ce),ttls:t(e,_e),sizes:t(e,De),keyMap:t(e,M),keyList:t(e,q),valList:t(e,y),next:t(e,oe),prev:t(e,pe),get head(){return t(e,se)},get tail(){return t(e,Y)},free:t(e,fe),isBackgroundFetch:s=>{var o;return w(o=e,L,W).call(o,s)},backgroundFetch:(s,o,n,i)=>{var l;return w(l=e,dr,Rr).call(l,s,o,n,i)},moveToTail:s=>{var o;return w(o=e,rr,Gr).call(o,s)},indexes:s=>{var o;return w(o=e,Oe,Be).call(o,s)},rindexes:s=>{var o;return w(o=e,Re,He).call(o,s)},isStale:s=>{var o;return t(o=e,ue).call(o,s)}}}get max(){return t(this,Te)}get maxSize(){return t(this,le)}get calculatedSize(){return t(this,we)}get size(){return t(this,N)}get fetchMethod(){return t(this,lr)}get dispose(){return t(this,Se)}get disposeAfter(){return t(this,Ee)}getRemainingTTL(e){return t(this,M).has(e)?1/0:0}*entries(){for(const e of w(this,Oe,Be).call(this))t(this,y)[e]!==void 0&&t(this,q)[e]!==void 0&&!w(this,L,W).call(this,t(this,y)[e])&&(yield[t(this,q)[e],t(this,y)[e]])}*rentries(){for(const e of w(this,Re,He).call(this))t(this,y)[e]!==void 0&&t(this,q)[e]!==void 0&&!w(this,L,W).call(this,t(this,y)[e])&&(yield[t(this,q)[e],t(this,y)[e]])}*keys(){for(const e of w(this,Oe,Be).call(this)){const s=t(this,q)[e];s!==void 0&&!w(this,L,W).call(this,t(this,y)[e])&&(yield s)}}*rkeys(){for(const e of w(this,Re,He).call(this)){const s=t(this,q)[e];s!==void 0&&!w(this,L,W).call(this,t(this,y)[e])&&(yield s)}}*values(){for(const e of w(this,Oe,Be).call(this))t(this,y)[e]!==void 0&&!w(this,L,W).call(this,t(this,y)[e])&&(yield t(this,y)[e])}*rvalues(){for(const e of w(this,Re,He).call(this))t(this,y)[e]!==void 0&&!w(this,L,W).call(this,t(this,y)[e])&&(yield t(this,y)[e])}[Symbol.iterator](){return this.entries()}find(e,s={}){for(const o of w(this,Oe,Be).call(this)){const n=t(this,y)[o],i=w(this,L,W).call(this,n)?n.__staleWhileFetching:n;if(i!==void 0&&e(i,t(this,q)[o],this))return this.get(t(this,q)[o],s)}}forEach(e,s=this){for(const o of w(this,Oe,Be).call(this)){const n=t(this,y)[o],i=w(this,L,W).call(this,n)?n.__staleWhileFetching:n;i!==void 0&&e.call(s,i,t(this,q)[o],this)}}rforEach(e,s=this){for(const o of w(this,Re,He).call(this)){const n=t(this,y)[o],i=w(this,L,W).call(this,n)?n.__staleWhileFetching:n;i!==void 0&&e.call(s,i,t(this,q)[o],this)}}purgeStale(){let e=!1;for(const s of w(this,Re,He).call(this,{allowStale:!0}))t(this,ue).call(this,s)&&(this.delete(t(this,q)[s]),e=!0);return e}dump(){const e=[];for(const s of w(this,Oe,Be).call(this,{allowStale:!0})){const o=t(this,q)[s],n=t(this,y)[s],i=w(this,L,W).call(this,n)?n.__staleWhileFetching:n;if(i===void 0||o===void 0)continue;const l={value:i};if(t(this,_e)&&t(this,Ce)){l.ttl=t(this,_e)[s];const m=v.now()-t(this,Ce)[s];l.start=Math.floor(Date.now()-m)}t(this,De)&&(l.size=t(this,De)[s]),e.unshift([o,l])}return e}load(e){this.clear();for(const[s,o]of e){if(o.start){const n=Date.now()-o.start;o.start=v.now()-n}this.set(s,o.value,o)}}set(e,s,o={}){var Q,ne,de;if(s===void 0)return this.delete(e),this;const{ttl:n=this.ttl,start:i,noDisposeOnSet:l=this.noDisposeOnSet,sizeCalculation:m=this.sizeCalculation,status:h}=o;let{noUpdateTTL:D=this.noUpdateTTL}=o;const B=t(this,fr).call(this,e,s,o.size||0,m);if(this.maxEntrySize&&B>this.maxEntrySize)return h&&(h.set="miss",h.maxEntrySizeExceeded=!0),this.delete(e),this;let R=t(this,N)===0?void 0:t(this,M).get(e);if(R===void 0)R=t(this,N)===0?t(this,Y):t(this,fe).length!==0?t(this,fe).pop():t(this,N)===t(this,Te)?w(this,ur,Or).call(this,!1):t(this,N),t(this,q)[R]=e,t(this,y)[R]=s,t(this,M).set(e,R),t(this,oe)[t(this,Y)]=R,t(this,pe)[R]=t(this,Y),b(this,Y,R),Pr(this,N)._++,t(this,pr).call(this,R,B,h),h&&(h.set="add"),D=!1;else{w(this,rr,Gr).call(this,R);const P=t(this,y)[R];if(s!==P){if(t(this,xe)&&w(this,L,W).call(this,P)?P.__abortController.abort(new Error("replaced")):l||(t(this,Pe)&&((Q=t(this,Se))==null||Q.call(this,P,e,"set")),t(this,ae)&&((ne=t(this,Z))==null||ne.push([P,e,"set"]))),t(this,er).call(this,R),t(this,pr).call(this,R,B,h),t(this,y)[R]=s,h){h.set="replace";const $=P&&w(this,L,W).call(this,P)?P.__staleWhileFetching:P;$!==void 0&&(h.oldValue=$)}}else h&&(h.set="update")}if(n!==0&&!t(this,_e)&&w(this,Er,Cr).call(this),t(this,_e)&&(D||t(this,wr).call(this,R,n,i),h&&t(this,Ie).call(this,h,R)),!l&&t(this,ae)&&t(this,Z)){const P=t(this,Z);let $;for(;$=P==null?void 0:P.shift();)(de=t(this,Ee))==null||de.call(this,...$)}return this}pop(){var e;try{for(;t(this,N);){const s=t(this,y)[t(this,se)];if(w(this,ur,Or).call(this,!0),w(this,L,W).call(this,s)){if(s.__staleWhileFetching)return s.__staleWhileFetching}else if(s!==void 0)return s}}finally{if(t(this,ae)&&t(this,Z)){const s=t(this,Z);let o;for(;o=s==null?void 0:s.shift();)(e=t(this,Ee))==null||e.call(this,...o)}}}has(e,s={}){const{updateAgeOnHas:o=this.updateAgeOnHas,status:n}=s,i=t(this,M).get(e);if(i!==void 0){const l=t(this,y)[i];if(w(this,L,W).call(this,l)&&l.__staleWhileFetching===void 0)return!1;if(t(this,ue).call(this,i))n&&(n.has="stale",t(this,Ie).call(this,n,i));else return o&&t(this,Qe).call(this,i),n&&(n.has="hit",t(this,Ie).call(this,n,i)),!0}else n&&(n.has="miss");return!1}peek(e,s={}){const{allowStale:o=this.allowStale}=s,n=t(this,M).get(e);if(n!==void 0&&(o||!t(this,ue).call(this,n))){const i=t(this,y)[n];return w(this,L,W).call(this,i)?i.__staleWhileFetching:i}}async fetch(e,s={}){const{allowStale:o=this.allowStale,updateAgeOnGet:n=this.updateAgeOnGet,noDeleteOnStaleGet:i=this.noDeleteOnStaleGet,ttl:l=this.ttl,noDisposeOnSet:m=this.noDisposeOnSet,size:h=0,sizeCalculation:D=this.sizeCalculation,noUpdateTTL:B=this.noUpdateTTL,noDeleteOnFetchRejection:R=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:Q=this.allowStaleOnFetchRejection,ignoreFetchAbort:ne=this.ignoreFetchAbort,allowStaleOnFetchAbort:de=this.allowStaleOnFetchAbort,context:P,forceRefresh:$=!1,status:F,signal:H}=s;if(!t(this,xe))return F&&(F.fetch="get"),this.get(e,{allowStale:o,updateAgeOnGet:n,noDeleteOnStaleGet:i,status:F});const ee={allowStale:o,updateAgeOnGet:n,noDeleteOnStaleGet:i,ttl:l,noDisposeOnSet:m,size:h,sizeCalculation:D,noUpdateTTL:B,noDeleteOnFetchRejection:R,allowStaleOnFetchRejection:Q,allowStaleOnFetchAbort:de,ignoreFetchAbort:ne,status:F,signal:H};let V=t(this,M).get(e);if(V===void 0){F&&(F.fetch="miss");const te=w(this,dr,Rr).call(this,e,V,ee,P);return te.__returned=te}else{const te=t(this,y)[V];if(w(this,L,W).call(this,te)){const Sr=o&&te.__staleWhileFetching!==void 0;return F&&(F.fetch="inflight",Sr&&(F.returnedStale=!0)),Sr?te.__staleWhileFetching:te.__returned=te}const Le=t(this,ue).call(this,V);if(!$&&!Le)return F&&(F.fetch="hit"),w(this,rr,Gr).call(this,V),n&&t(this,Qe).call(this,V),F&&t(this,Ie).call(this,F,V),te;const Fe=w(this,dr,Rr).call(this,e,V,ee,P),vr=Fe.__staleWhileFetching!==void 0&&o;return F&&(F.fetch=Le?"stale":"refresh",vr&&Le&&(F.returnedStale=!0)),vr?Fe.__staleWhileFetching:Fe.__returned=Fe}}get(e,s={}){const{allowStale:o=this.allowStale,updateAgeOnGet:n=this.updateAgeOnGet,noDeleteOnStaleGet:i=this.noDeleteOnStaleGet,status:l}=s,m=t(this,M).get(e);if(m!==void 0){const h=t(this,y)[m],D=w(this,L,W).call(this,h);return l&&t(this,Ie).call(this,l,m),t(this,ue).call(this,m)?(l&&(l.get="stale"),D?(l&&o&&h.__staleWhileFetching!==void 0&&(l.returnedStale=!0),o?h.__staleWhileFetching:void 0):(i||this.delete(e),l&&o&&(l.returnedStale=!0),o?h:void 0)):(l&&(l.get="hit"),D?h.__staleWhileFetching:(w(this,rr,Gr).call(this,m),n&&t(this,Qe).call(this,m),h))}else l&&(l.get="miss")}delete(e){var o,n,i,l;let s=!1;if(t(this,N)!==0){const m=t(this,M).get(e);if(m!==void 0)if(s=!0,t(this,N)===1)this.clear();else{t(this,er).call(this,m);const h=t(this,y)[m];w(this,L,W).call(this,h)?h.__abortController.abort(new Error("deleted")):(t(this,Pe)||t(this,ae))&&(t(this,Pe)&&((o=t(this,Se))==null||o.call(this,h,e,"delete")),t(this,ae)&&((n=t(this,Z))==null||n.push([h,e,"delete"]))),t(this,M).delete(e),t(this,q)[m]=void 0,t(this,y)[m]=void 0,m===t(this,Y)?b(this,Y,t(this,pe)[m]):m===t(this,se)?b(this,se,t(this,oe)[m]):(t(this,oe)[t(this,pe)[m]]=t(this,oe)[m],t(this,pe)[t(this,oe)[m]]=t(this,pe)[m]),Pr(this,N)._--,t(this,fe).push(m)}}if(t(this,ae)&&((i=t(this,Z))!=null&&i.length)){const m=t(this,Z);let h;for(;h=m==null?void 0:m.shift();)(l=t(this,Ee))==null||l.call(this,...h)}return s}clear(){var e,s,o;for(const n of w(this,Re,He).call(this,{allowStale:!0})){const i=t(this,y)[n];if(w(this,L,W).call(this,i))i.__abortController.abort(new Error("deleted"));else{const l=t(this,q)[n];t(this,Pe)&&((e=t(this,Se))==null||e.call(this,i,l,"delete")),t(this,ae)&&((s=t(this,Z))==null||s.push([i,l,"delete"]))}}if(t(this,M).clear(),t(this,y).fill(void 0),t(this,q).fill(void 0),t(this,_e)&&t(this,Ce)&&(t(this,_e).fill(0),t(this,Ce).fill(0)),t(this,De)&&t(this,De).fill(0),b(this,se,0),b(this,Y,0),t(this,fe).length=0,b(this,we,0),b(this,N,0),t(this,ae)&&t(this,Z)){const n=t(this,Z);let i;for(;i=n==null?void 0:n.shift();)(o=t(this,Ee))==null||o.call(this,...i)}}};let Ze=Fr;Te=new WeakMap,le=new WeakMap,Se=new WeakMap,Ee=new WeakMap,lr=new WeakMap,N=new WeakMap,we=new WeakMap,M=new WeakMap,q=new WeakMap,y=new WeakMap,oe=new WeakMap,pe=new WeakMap,se=new WeakMap,Y=new WeakMap,fe=new WeakMap,Z=new WeakMap,De=new WeakMap,Ce=new WeakMap,_e=new WeakMap,Pe=new WeakMap,xe=new WeakMap,ae=new WeakMap,Er=new WeakSet,Cr=function(){const e=new J(t(this,Te)),s=new J(t(this,Te));b(this,_e,e),b(this,Ce,s),b(this,wr,(i,l,m=v.now())=>{if(s[i]=l!==0?m:0,e[i]=l,l!==0&&this.ttlAutopurge){const h=setTimeout(()=>{t(this,ue).call(this,i)&&this.delete(t(this,q)[i])},l+1);h.unref&&h.unref()}}),b(this,Qe,i=>{s[i]=e[i]!==0?v.now():0}),b(this,Ie,(i,l)=>{if(e[l]){const m=e[l],h=s[l];i.ttl=m,i.start=h,i.now=o||n();const D=i.now-h;i.remainingTTL=m-D}});let o=0;const n=()=>{const i=v.now();if(this.ttlResolution>0){o=i;const l=setTimeout(()=>o=0,this.ttlResolution);l.unref&&l.unref()}return i};this.getRemainingTTL=i=>{const l=t(this,M).get(i);if(l===void 0)return 0;const m=e[l],h=s[l];if(m===0||h===0)return 1/0;const D=(o||n())-h;return m-D},b(this,ue,i=>e[i]!==0&&s[i]!==0&&(o||n())-s[i]>e[i])},Qe=new WeakMap,Ie=new WeakMap,wr=new WeakMap,ue=new WeakMap,Ar=new WeakSet,xr=function(){const e=new J(t(this,Te));b(this,we,0),b(this,De,e),b(this,er,s=>{b(this,we,t(this,we)-e[s]),e[s]=0}),b(this,fr,(s,o,n,i)=>{if(w(this,L,W).call(this,o))return 0;if(!I(n))if(i){if(typeof i!="function")throw new TypeError("sizeCalculation must be a function");if(n=i(o,s),!I(n))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");return n}),b(this,pr,(s,o,n)=>{if(e[s]=o,t(this,le)){const i=t(this,le)-e[s];for(;t(this,we)>i;)w(this,ur,Or).call(this,!0)}b(this,we,t(this,we)+e[s]),n&&(n.entrySize=o,n.totalCalculatedSize=t(this,we))})},er=new WeakMap,pr=new WeakMap,fr=new WeakMap,Oe=new WeakSet,Be=function*({allowStale:e=this.allowStale}={}){if(t(this,N))for(let s=t(this,Y);!(!w(this,_r,Ir).call(this,s)||((e||!t(this,ue).call(this,s))&&(yield s),s===t(this,se)));)s=t(this,pe)[s]},Re=new WeakSet,He=function*({allowStale:e=this.allowStale}={}){if(t(this,N))for(let s=t(this,se);!(!w(this,_r,Ir).call(this,s)||((e||!t(this,ue).call(this,s))&&(yield s),s===t(this,Y)));)s=t(this,oe)[s]},_r=new WeakSet,Ir=function(e){return e!==void 0&&t(this,M).get(t(this,q)[e])===e},ur=new WeakSet,Or=function(e){var i,l;const s=t(this,se),o=t(this,q)[s],n=t(this,y)[s];return t(this,xe)&&w(this,L,W).call(this,n)?n.__abortController.abort(new Error("evicted")):(t(this,Pe)||t(this,ae))&&(t(this,Pe)&&((i=t(this,Se))==null||i.call(this,n,o,"evict")),t(this,ae)&&((l=t(this,Z))==null||l.push([n,o,"evict"]))),t(this,er).call(this,s),e&&(t(this,q)[s]=void 0,t(this,y)[s]=void 0,t(this,fe).push(s)),t(this,N)===1?(b(this,se,b(this,Y,0)),t(this,fe).length=0):b(this,se,t(this,oe)[s]),t(this,M).delete(o),Pr(this,N)._--,s},dr=new WeakSet,Rr=function(e,s,o,n){const i=s===void 0?void 0:t(this,y)[s];if(w(this,L,W).call(this,i))return i;const l=new f,{signal:m}=o;m==null||m.addEventListener("abort",()=>l.abort(m.reason),{signal:l.signal});const h={signal:l.signal,options:o,context:n},D=(P,$=!1)=>{const{aborted:F}=l.signal,H=o.ignoreFetchAbort&&P!==void 0;if(o.status&&(F&&!$?(o.status.fetchAborted=!0,o.status.fetchError=l.signal.reason,H&&(o.status.fetchAbortIgnored=!0)):o.status.fetchResolved=!0),F&&!H&&!$)return R(l.signal.reason);const ee=ne;return t(this,y)[s]===ne&&(P===void 0?ee.__staleWhileFetching?t(this,y)[s]=ee.__staleWhileFetching:this.delete(e):(o.status&&(o.status.fetchUpdated=!0),this.set(e,P,h.options))),P},B=P=>(o.status&&(o.status.fetchRejected=!0,o.status.fetchError=P),R(P)),R=P=>{const{aborted:$}=l.signal,F=$&&o.allowStaleOnFetchAbort,H=F||o.allowStaleOnFetchRejection,ee=H||o.noDeleteOnFetchRejection,V=ne;if(t(this,y)[s]===ne&&(!ee||V.__staleWhileFetching===void 0?this.delete(e):F||(t(this,y)[s]=V.__staleWhileFetching)),H)return o.status&&V.__staleWhileFetching!==void 0&&(o.status.returnedStale=!0),V.__staleWhileFetching;if(V.__returned===V)throw P},Q=(P,$)=>{var H;const F=(H=t(this,lr))==null?void 0:H.call(this,e,i,h);F&&F instanceof Promise&&F.then(ee=>P(ee),$),l.signal.addEventListener("abort",()=>{(!o.ignoreFetchAbort||o.allowStaleOnFetchAbort)&&(P(),o.allowStaleOnFetchAbort&&(P=ee=>D(ee,!0)))})};o.status&&(o.status.fetchDispatched=!0);const ne=new Promise(Q).then(D,B),de=Object.assign(ne,{__abortController:l,__staleWhileFetching:i,__returned:void 0});return s===void 0?(this.set(e,de,{...h.options,status:void 0}),s=t(this,M).get(e)):t(this,y)[s]=de,de},L=new WeakSet,W=function(e){if(!t(this,xe))return!1;const s=e;return!!s&&s instanceof Promise&&s.hasOwnProperty("__staleWhileFetching")&&s.__abortController instanceof f},br=new WeakSet,Lr=function(e,s){t(this,pe)[s]=e,t(this,oe)[e]=s},rr=new WeakSet,Gr=function(e){e!==t(this,Y)&&(e===t(this,se)?b(this,se,t(this,oe)[e]):w(this,br,Lr).call(this,t(this,pe)[e],t(this,oe)[e]),w(this,br,Lr).call(this,t(this,Y),e),b(this,Y,e))};async function yr({appId:r,privateKey:e,timeDifference:s}){try{const o=await(0,j.C)({id:+r,privateKey:e,now:s&&Math.floor(Date.now()/1e3)+s});return{type:"app",token:o.token,appId:o.appId,expiresAt:new Date(o.expiration*1e3).toISOString()}}catch(o){throw e==="-----BEGIN RSA PRIVATE KEY-----"?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):o}}function Br(){return new Ze({max:15e3,ttl:1e3*60*59})}async function Hr(r,e){const s=jr(e),o=await r.get(s);if(!o)return;const[n,i,l,m,h,D]=o.split("|"),B=e.permissions||h.split(/,/).reduce((R,Q)=>(/!$/.test(Q)?R[Q.slice(0,-1)]="write":R[Q]="read",R),{});return{token:n,createdAt:i,expiresAt:l,permissions:B,repositoryIds:e.repositoryIds,repositoryNames:e.repositoryNames,singleFileName:D,repositorySelection:m}}async function Vr(r,e,s){const o=jr(e),n=e.permissions?"":Object.keys(s.permissions).map(l=>`${l}${s.permissions[l]==="write"?"!":""}`).join(","),i=[s.token,s.createdAt,s.expiresAt,s.repositorySelection,n,s.singleFileName].join("|");await r.set(o,i)}function jr({installationId:r,permissions:e={},repositoryIds:s=[],repositoryNames:o=[]}){const n=Object.keys(e).sort().map(m=>e[m]==="read"?m:`${m}!`).join(","),i=s.sort().join(","),l=o.join(",");return[r,i,l,n].filter(Boolean).join("|")}function qr({installationId:r,token:e,createdAt:s,expiresAt:o,repositorySelection:n,permissions:i,repositoryIds:l,repositoryNames:m,singleFileName:h}){return Object.assign({type:"token",tokenType:"installation",token:e,installationId:r,permissions:i,createdAt:s,expiresAt:o,repositorySelection:n},l?{repositoryIds:l}:null,m?{repositoryNames:m}:null,h?{singleFileName:h}:null)}async function Wr(r,e,s){const o=Number(e.installationId||r.installationId);if(!o)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(e.factory){const{type:H,factory:ee,oauthApp:V,...te}={...r,...e};return ee(te)}const n=Object.assign({installationId:o},e);if(!e.refresh){const H=await Hr(r.cache,n);if(H){const{token:ee,createdAt:V,expiresAt:te,permissions:Le,repositoryIds:Fe,repositoryNames:Ur,singleFileName:vr,repositorySelection:Sr}=H;return qr({installationId:o,token:ee,createdAt:V,expiresAt:te,permissions:Le,repositorySelection:Sr,repositoryIds:Fe,repositoryNames:Ur,singleFileName:vr})}}const i=await yr(r),l=s||r.request,{data:{token:m,expires_at:h,repositories:D,permissions:B,repository_selection:R,single_file:Q}}=await l("POST /app/installations/{installation_id}/access_tokens",{installation_id:o,repository_ids:e.repositoryIds,repositories:e.repositoryNames,permissions:e.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${i.token}`}}),ne=B||{},de=R||"all",P=D?D.map(H=>H.id):void 0,$=D?D.map(H=>H.name):void 0,F=new Date().toISOString();return await Vr(r.cache,n,{token:m,createdAt:F,expiresAt:h,repositorySelection:de,permissions:ne,repositoryIds:P,repositoryNames:$,singleFileName:Q}),qr({installationId:o,token:m,createdAt:F,expiresAt:h,repositorySelection:de,permissions:ne,repositoryIds:P,repositoryNames:$,singleFileName:Q})}async function Nr(r,e){switch(e.type){case"app":return yr(r);case"oauth":r.log.warn(new T.$('[@octokit/auth-app] {type: "oauth"} is deprecated. Use {type: "oauth-app"} instead'));case"oauth-app":return r.oauthApp({type:"oauth-app"});case"installation":return Wr(r,{...e,type:"installation"});case"oauth-user":return r.oauthApp(e);default:throw new Error(`Invalid auth type: ${e.type}`)}}var Mr=["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"];function Kr(r){const s=`^(?:${r.map(o=>o.split("/").map(n=>n.startsWith("{")?"(?:.+?)":n).join("/")).map(o=>`(?:${o})`).join("|")})$`;return new RegExp(s,"i")}var Jr=Kr(Mr);function Yr(r){return!!r&&Jr.test(r.split("?")[0])}var Xr=5*1e3;function Zr(r){return!(r.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||r.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}async function Qr(r,e,s,o){const n=e.endpoint.merge(s,o),i=n.url;if(/\/login\/oauth\/access_token$/.test(i))return e(n);if(Yr(i.replace(e.endpoint.DEFAULTS.baseUrl,""))){const{token:h}=await yr(r);n.headers.authorization=`bearer ${h}`;let D;try{D=await e(n)}catch(B){if(Zr(B)||typeof B.response.headers.date=="undefined")throw B;const R=Math.floor((Date.parse(B.response.headers.date)-Date.parse(new Date().toString()))/1e3);r.log.warn(B.message),r.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${R} seconds. Retrying request with the difference accounted for.`);const{token:Q}=await yr({...r,timeDifference:R});return n.headers.authorization=`bearer ${Q}`,e(n)}return D}if($e(i)){const h=await r.oauthApp({type:"oauth-app"});return n.headers.authorization=h.headers.authorization,e(n)}const{token:l,createdAt:m}=await Wr(r,{},e);return n.headers.authorization=`token ${l}`,zr(r,e,n,m)}async function zr(r,e,s,o,n=0){const i=+new Date-+new Date(o);try{return await e(s)}catch(l){if(l.status!==401)throw l;if(i>=Xr)throw n>0&&(l.message=`After ${n} retries within ${i/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),l;++n;const m=n*1e3;return r.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${n}, wait: ${m/1e3}s)`),await new Promise(h=>setTimeout(h,m)),zr(r,e,s,o,n)}}var es="4.0.13";function rs(r){if(!r.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!Number.isFinite(+r.appId))throw new Error("[@octokit/auth-app] appId option must be a number or numeric string");if(!r.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in r&&!r.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");const e=Object.assign({warn:console.warn.bind(console)},r.log),s=r.request||x.W.defaults({headers:{"user-agent":`octokit-auth-app.js/${es} ${(0,K.i)()}`}}),o=Object.assign({request:s,cache:Br()},r,r.installationId?{installationId:Number(r.installationId)}:{},{log:e,oauthApp:E({clientType:"github-app",clientId:r.clientId||"",clientSecret:r.clientSecret||"",request:s})});return Object.assign(Nr.bind(null,o),{hook:Qr.bind(null,o)})}},29717:(C,O,G)=>{G.d(O,{L:()=>qe});var K=G(91346),x=G(29928),be=G.n(x);const ie=be()(ge=>console.warn(ge)),je=be()(ge=>console.warn(ge));class qe extends Error{constructor(Ge,We,re){super(Ge),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=We;let ce;"headers"in re&&typeof re.headers!="undefined"&&(ce=re.headers),"response"in re&&(this.response=re.response,ce=re.response.headers);const ke=Object.assign({},re.request);re.request.headers.authorization&&(ke.headers=Object.assign({},re.request.headers,{authorization:re.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),ke.url=ke.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=ke,Object.defineProperty(this,"code",{get(){return ie(new K.$("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),We}}),Object.defineProperty(this,"headers",{get(){return je(new K.$("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),ce||{}}})}}},31765:(C,O,G)=>{G.d(O,{W:()=>Xe});var K=G(66439),x=G(7502);function be(c){return c?Object.keys(c).reduce((g,p)=>(g[p.toLowerCase()]=c[p],g),{}):{}}function ie(c,g){const p=Object.assign({},c);return Object.keys(g).forEach(E=>{(0,K.P)(g[E])?E in c?p[E]=ie(c[E],g[E]):Object.assign(p,{[E]:g[E]}):Object.assign(p,{[E]:g[E]})}),p}function je(c){for(const g in c)c[g]===void 0&&delete c[g];return c}function qe(c,g,p){if(typeof g=="string"){let[T,j]=g.split(" ");p=Object.assign(j?{method:T,url:j}:{url:T},p)}else p=Object.assign({},g);p.headers=be(p.headers),je(p),je(p.headers);const E=ie(c||{},p);return c&&c.mediaType.previews.length&&(E.mediaType.previews=c.mediaType.previews.filter(T=>!E.mediaType.previews.includes(T)).concat(E.mediaType.previews)),E.mediaType.previews=E.mediaType.previews.map(T=>T.replace(/-preview/,"")),E}function ge(c,g){const p=/\?/.test(c)?"&":"?",E=Object.keys(g);return E.length===0?c:c+p+E.map(T=>T==="q"?"q="+g.q.split("+").map(encodeURIComponent).join("+"):`${T}=${encodeURIComponent(g[T])}`).join("&")}var Ge=/\{[^}]+\}/g;function We(c){return c.replace(/^\W+|\W+$/g,"").split(/,/)}function re(c){const g=c.match(Ge);return g?g.map(We).reduce((p,E)=>p.concat(E),[]):[]}function ce(c,g){return Object.keys(c).filter(p=>!g.includes(p)).reduce((p,E)=>(p[E]=c[E],p),{})}function ke(c){return c.split(/(%[0-9A-Fa-f]{2})/g).map(function(g){return/%[0-9A-Fa-f]/.test(g)||(g=encodeURI(g).replace(/%5B/g,"[").replace(/%5D/g,"]")),g}).join("")}function he(c){return encodeURIComponent(c).replace(/[!'()*]/g,function(g){return"%"+g.charCodeAt(0).toString(16).toUpperCase()})}function ye(c,g,p){return g=c==="+"||c==="#"?ke(g):he(g),p?he(p)+"="+g:g}function Ae(c){return c!=null}function Ve(c){return c===";"||c==="&"||c==="?"}function sr(c,g,p,E){var T=c[p],j=[];if(Ae(T)&&T!=="")if(typeof T=="string"||typeof T=="number"||typeof T=="boolean")T=T.toString(),E&&E!=="*"&&(T=T.substring(0,parseInt(E,10))),j.push(ye(g,T,Ve(g)?p:""));else if(E==="*")Array.isArray(T)?T.filter(Ae).forEach(function(k){j.push(ye(g,k,Ve(g)?p:""))}):Object.keys(T).forEach(function(k){Ae(T[k])&&j.push(ye(g,T[k],k))});else{const k=[];Array.isArray(T)?T.filter(Ae).forEach(function(v){k.push(ye(g,v))}):Object.keys(T).forEach(function(v){Ae(T[v])&&(k.push(he(v)),k.push(ye(g,T[v].toString())))}),Ve(g)?j.push(he(p)+"="+k.join(",")):k.length!==0&&j.push(k.join(","))}else g===";"?Ae(T)&&j.push(he(p)):T===""&&(g==="&"||g==="?")?j.push(he(p)+"="):T===""&&j.push("");return j}function kr(c){return{expand:gr.bind(null,c)}}function gr(c,g){var p=["+","#",".","/",";","?","&"];return c.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(E,T,j){if(T){let v="";const a=[];if(p.indexOf(T.charAt(0))!==-1&&(v=T.charAt(0),T=T.substr(1)),T.split(/,/g).forEach(function(d){var u=/([^:\*]*)(?::(\d+)|(\*))?/.exec(d);a.push(sr(g,v,u[1],u[2]||u[3]))}),v&&v!=="+"){var k=",";return v==="?"?k="&":v!=="#"&&(k=v),(a.length!==0?v:"")+a.join(k)}else return a.join(",")}else return ke(j)})}function tr(c){let g=c.method.toUpperCase(),p=(c.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),E=Object.assign({},c.headers),T,j=ce(c,["method","baseUrl","url","headers","request","mediaType"]);const k=re(p);p=kr(p).expand(j),/^http/.test(p)||(p=c.baseUrl+p);const v=Object.keys(c).filter(u=>k.includes(u)).concat("baseUrl"),a=ce(j,v);if(!/application\/octet-stream/i.test(E.accept)&&(c.mediaType.format&&(E.accept=E.accept.split(/,/).map(u=>u.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${c.mediaType.format}`)).join(",")),c.mediaType.previews.length)){const u=E.accept.match(/[\w-]+(?=-preview)/g)||[];E.accept=u.concat(c.mediaType.previews).map(f=>{const _=c.mediaType.format?`.${c.mediaType.format}`:"+json";return`application/vnd.github.${f}-preview${_}`}).join(",")}return["GET","HEAD"].includes(g)?p=ge(p,a):"data"in a?T=a.data:Object.keys(a).length&&(T=a),!E["content-type"]&&typeof T!="undefined"&&(E["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(g)&&typeof T=="undefined"&&(T=""),Object.assign({method:g,url:p,headers:E},typeof T!="undefined"?{body:T}:null,c.request?{request:c.request}:null)}function or(c,g,p){return tr(qe(c,g,p))}function Ue(c,g){const p=qe(c,g),E=or.bind(null,p);return Object.assign(E,{DEFAULTS:p,defaults:Ue.bind(null,p),merge:qe.bind(null,p),parse:tr})}var hr="7.0.6",Ne=`octokit-endpoint.js/${hr} ${(0,x.i)()}`,Me={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Ne},mediaType:{format:"",previews:[]}},mr=Ue(null,Me),Ke=G(34911),nr=G.n(Ke),ve=G(29717),Tr="6.2.8";function ir(c){return c.arrayBuffer()}function Je(c){const g=c.request&&c.request.log?c.request.log:console;((0,K.P)(c.body)||Array.isArray(c.body))&&(c.body=JSON.stringify(c.body));let p={},E,T;return(c.request&&c.request.fetch||globalThis.fetch||nr())(c.url,Object.assign({method:c.method,body:c.body,headers:c.headers,redirect:c.redirect,...c.body&&{duplex:"half"}},c.request)).then(async k=>{T=k.url,E=k.status;for(const v of k.headers)p[v[0]]=v[1];if("deprecation"in p){const v=p.link&&p.link.match(/<([^>]+)>; rel="deprecation"/),a=v&&v.pop();g.warn(`[@octokit/request] "${c.method} ${c.url}" is deprecated. It is scheduled to be removed on ${p.sunset}${a?`. See ${a}`:""}`)}if(!(E===204||E===205)){if(c.method==="HEAD"){if(E<400)return;throw new ve.L(k.statusText,E,{response:{url:T,status:E,headers:p,data:void 0},request:c})}if(E===304)throw new ve.L("Not modified",E,{response:{url:T,status:E,headers:p,data:await ze(k)},request:c});if(E>=400){const v=await ze(k);throw new ve.L($e(v),E,{response:{url:T,status:E,headers:p,data:v},request:c})}return ze(k)}}).then(k=>({status:E,url:T,headers:p,data:k})).catch(k=>{throw k instanceof ve.L||k.name==="AbortError"?k:new ve.L(k.message,500,{request:c})})}async function ze(c){const g=c.headers.get("content-type");return/application\/json/.test(g)?c.json():!g||/^text\/|charset=utf-8$/.test(g)?c.text():ir(c)}function $e(c){return typeof c=="string"?c:"message"in c?Array.isArray(c.errors)?`${c.message}: ${c.errors.map(JSON.stringify).join(", ")}`:c.message:`Unknown error: ${JSON.stringify(c)}`}function Ye(c,g){const p=c.defaults(g);return Object.assign(function(T,j){const k=p.merge(T,j);if(!k.request||!k.request.hook)return Je(p.parse(k));const v=(a,d)=>Je(p.parse(p.merge(a,d)));return Object.assign(v,{endpoint:p,defaults:Ye.bind(null,p)}),k.request.hook(v,k)},{endpoint:p,defaults:Ye.bind(null,p)})}var Xe=Ye(mr,{headers:{"user-agent":`octokit-request.js/${Tr} ${(0,x.i)()}`}})},89393:(C,O,G)=>{G.d(O,{v:()=>v});var K=G(7502),x=G(93222),be=G(31765),ie="5.0.6";function je(a){return`Request failed due to following response errors:
`+a.errors.map(d=>` - ${d.message}`).join(`
`)}var qe=class extends Error{constructor(a,d,u){super(je(u)),this.request=a,this.headers=d,this.response=u,this.name="GraphqlResponseError",this.errors=u.errors,this.data=u.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},ge=["method","baseUrl","url","headers","request","query","mediaType"],Ge=["query","method","url"],We=/\/api\/v3\/?$/;function re(a,d,u){if(u){if(typeof d=="string"&&"query"in u)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const S in u)if(Ge.includes(S))return Promise.reject(new Error(`[@octokit/graphql] "${S}" cannot be used as variable name`))}const f=typeof d=="string"?Object.assign({query:d},u):d,_=Object.keys(f).reduce((S,I)=>ge.includes(I)?(S[I]=f[I],S):(S.variables||(S.variables={}),S.variables[I]=f[I],S),{}),U=f.baseUrl||a.endpoint.DEFAULTS.baseUrl;return We.test(U)&&(_.url=U.replace(We,"/api/graphql")),a(_).then(S=>{if(S.data.errors){const I={};for(const X of Object.keys(S.headers))I[X]=S.headers[X];throw new qe(_,I,S.data)}return S.data.data})}function ce(a,d){const u=a.defaults(d);return Object.assign((_,U)=>re(u,_,U),{defaults:ce.bind(null,u),endpoint:u.endpoint})}var ke=ce(be.W,{headers:{"user-agent":`octokit-graphql.js/${ie} ${(0,K.i)()}`},method:"POST",url:"/graphql"});function he(a){return ce(a,{method:"POST",url:"/graphql"})}var ye=/^v1\./,Ae=/^ghs_/,Ve=/^ghu_/;async function sr(a){const d=a.split(/\./).length===3,u=ye.test(a)||Ae.test(a),f=Ve.test(a);return{type:"token",token:a,tokenType:d?"app":u?"installation":f?"user-to-server":"oauth"}}function kr(a){return a.split(/\./).length===3?`bearer ${a}`:`token ${a}`}async function gr(a,d,u,f){const _=d.endpoint.merge(u,f);return _.headers.authorization=kr(a),d(_)}var tr=function(d){if(!d)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof d!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return d=d.replace(/^(token|bearer) +/i,""),Object.assign(sr.bind(null,d),{hook:gr.bind(null,d)})},or="4.2.4",Ue=class{static defaults(a){return class extends this{constructor(...u){const f=u[0]||{};if(typeof a=="function"){super(a(f));return}super(Object.assign({},a,f,f.userAgent&&a.userAgent?{userAgent:`${f.userAgent} ${a.userAgent}`}:null))}}}static plugin(...a){var d;const u=this.plugins;return d=class extends this{},d.plugins=u.concat(a.filter(_=>!u.includes(_))),d}constructor(a={}){const d=new x.Collection,u={baseUrl:be.W.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},a.request,{hook:d.bind(null,"request")}),mediaType:{previews:[],format:""}};if(u.headers["user-agent"]=[a.userAgent,`octokit-core.js/${or} ${(0,K.i)()}`].filter(Boolean).join(" "),a.baseUrl&&(u.baseUrl=a.baseUrl),a.previews&&(u.mediaType.previews=a.previews),a.timeZone&&(u.headers["time-zone"]=a.timeZone),this.request=be.W.defaults(u),this.graphql=he(this.request).defaults(u),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},a.log),this.hook=d,a.authStrategy){const{authStrategy:_,...U}=a,S=_(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:U},a.auth));d.wrap("request",S.hook),this.auth=S}else if(!a.auth)this.auth=async()=>({type:"unauthenticated"});else{const _=tr(a.auth);d.wrap("request",_.hook),this.auth=_}this.constructor.plugins.forEach(_=>{Object.assign(this,_(this,a))})}};Ue.VERSION=or,Ue.plugins=[];const hr="1.0.4";function Ne(a){a.hook.wrap("request",(d,u)=>{a.log.debug("request",u);const f=Date.now(),_=a.request.endpoint.parse(u),U=_.url.replace(u.baseUrl,"");return d(u).then(S=>(a.log.info(`${_.method} ${U} - ${S.status} in ${Date.now()-f}ms`),S)).catch(S=>{throw a.log.info(`${_.method} ${U} - ${S.status} in ${Date.now()-f}ms`),S})})}Ne.VERSION=hr;var Me="6.1.2";function mr(a){if(!a.data)return{...a,data:[]};if(!("total_count"in a.data&&!("url"in a.data)))return a;const u=a.data.incomplete_results,f=a.data.repository_selection,_=a.data.total_count;delete a.data.incomplete_results,delete a.data.repository_selection,delete a.data.total_count;const U=Object.keys(a.data)[0],S=a.data[U];return a.data=S,typeof u!="undefined"&&(a.data.incomplete_results=u),typeof f!="undefined"&&(a.data.repository_selection=f),a.data.total_count=_,a}function Ke(a,d,u){const f=typeof d=="function"?d.endpoint(u):a.request.endpoint(d,u),_=typeof d=="function"?d:a.request,U=f.method,S=f.headers;let I=f.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!I)return{done:!0};try{const X=await _({method:U,url:I,headers:S}),J=mr(X);return I=((J.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:J}}catch(X){if(X.status!==409)throw X;return I="",{value:{status:200,headers:{},data:[]}}}}})}}function nr(a,d,u,f){return typeof u=="function"&&(f=u,u=void 0),ve(a,[],Ke(a,d,u)[Symbol.asyncIterator](),f)}function ve(a,d,u,f){return u.next().then(_=>{if(_.done)return d;let U=!1;function S(){U=!0}return d=d.concat(f?f(_.value,S):_.value.data),U?d:ve(a,d,u,f)})}var Tr=Object.assign(nr,{iterator:Ke}),ir=null;function Je(a){return typeof a=="string"?ir.includes(a):!1}function ze(a){return{paginate:Object.assign(nr.bind(null,a),{iterator:Ke.bind(null,a)})}}ze.VERSION=Me;var $e="7.2.3",Ye={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],addSelectedRepoToRequiredWorkflow:["PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repositories/{repository_id}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createRequiredWorkflow:["POST /orgs/{org}/actions/required_workflows"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteRequiredWorkflow:["DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoRequiredWorkflow:["GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}"],getRepoRequiredWorkflowUsage:["GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getRequiredWorkflow:["GET /orgs/{org}/actions/required_workflows/{required_workflow_id}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repositories/{repository_id}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoRequiredWorkflows:["GET /repos/{org}/{repo}/actions/required_workflows"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRequiredWorkflowRuns:["GET /repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs"],listRequiredWorkflows:["GET /orgs/{org}/actions/required_workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelectedRepositoriesRequiredWorkflow:["GET /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],removeSelectedRepoFromRequiredWorkflow:["DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedReposToRequiredWorkflow:["PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"],updateRequiredWorkflow:["PATCH /orgs/{org}/actions/required_workflows/{required_workflow_id}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteCodespacesBillingUsers:["DELETE /orgs/{org}/codespaces/billing/selected_users"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setCodespacesBilling:["PUT /orgs/{org}/codespaces/billing"],setCodespacesBillingUsers:["POST /orgs/{org}/codespaces/billing/selected_users"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /organizations/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /organizations/{org}/personal-access-token-requests"],listPatGrants:["GET /organizations/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /organizations/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /organizations/{org}/personal-access-token-requests"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /organizations/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /organizations/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployment"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disableLfsForRepo:["DELETE /repos/{owner}/{repo}/lfs"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enableLfsForRepo:["PUT /repos/{owner}/{repo}/lfs"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},Xe=Ye,c=new Map;for(const[a,d]of Object.entries(Xe))for(const[u,f]of Object.entries(d)){const[_,U,S]=f,[I,X]=_.split(/ /),J=Object.assign({method:I,url:X},U);c.has(a)||c.set(a,new Map),c.get(a).set(u,{scope:a,methodName:u,endpointDefaults:J,decorations:S})}var g={get({octokit:a,scope:d,cache:u},f){if(u[f])return u[f];const{decorations:_,endpointDefaults:U}=c.get(d).get(f);return _?u[f]=E(a,d,f,U,_):u[f]=a.request.defaults(U),u[f]}};function p(a){const d={};for(const u of c.keys())d[u]=new Proxy({octokit:a,scope:u,cache:{}},g);return d}function E(a,d,u,f,_){const U=a.request.defaults(f);function S(...I){let X=U.endpoint.merge(...I);if(_.mapToData)return X=Object.assign({},X,{data:X[_.mapToData],[_.mapToData]:void 0}),U(X);if(_.renamed){const[J,me]=_.renamed;a.log.warn(`octokit.${d}.${u}() has been renamed to octokit.${J}.${me}()`)}if(_.deprecated&&a.log.warn(_.deprecated),_.renamedParameters){const J=U.endpoint.merge(...I);for(const[me,Ze]of Object.entries(_.renamedParameters))me in J&&(a.log.warn(`"${me}" parameter is deprecated for "octokit.${d}.${u}()". Use "${Ze}" instead`),Ze in J||(J[Ze]=J[me]),delete J[me]);return U(J)}return U(...I)}return Object.assign(S,U)}function T(a){return{rest:p(a)}}T.VERSION=$e;function j(a){const d=p(a);return{...d,rest:d}}j.VERSION=$e;var k="19.0.13",v=Ue.plugin(Ne,j,ze).defaults({userAgent:`octokit-rest.js/${k}`})}}]);})();

//# sourceMappingURL=module-octokit.36cfc981.js.map
{"version":3,"file":"static/module-remix-run.96f926e9.js","mappings":"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","sources":["webpack://app/../../node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.11.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, viewTransitionOpts) {\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    subscribers.forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: viewTransitionOpts\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), viewTransitionOpts);\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (deletedFetchers.has(key)) {\n      state.fetchers.set(key, getDoneFetcher(undefined));\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission\n        });\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    if (deletedFetchers.has(key)) {\n      state.fetchers.set(key, getDoneFetcher(undefined));\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"names":["_extends","target","i","source","key","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","entry","index","createMemoryLocation","clampIndex","action","listener","n","getCurrentLocation","to","state","location","createLocation","warning","createHref","createPath","path","parsePath","nextLocation","delta","nextIndex","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","pathname","search","hash","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","createHashHref","base","href","url","hashIndex","validateHashLocation","invariant","value","message","cond","createKey","getHistoryState","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","getIndex","handlePop","history","push","historyState","error","replace","createURL","ResultType","immutableRouteKeys","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","convertRouteMatchToUiMatch","match","loaderData","params","parentsMeta","flattenRoute","relativePath","meta","joinPaths","routesMeta","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","required","restExploded","result","subpath","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","score","segment","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","normalizePathname","generatePath","originalPath","prefix","stringify","p","array","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","pathnameBase","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","caseSensitive","regexpSource","_","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","headers","AbortedDeferredError","DeferredData","reject","r","onAbort","acc","_ref2","promise","undefinedError","aborted","settledKey","subscriber","v","k","signal","resolve","_ref3","unwrapTrackedPromise","isTrackedPromise","defer","redirect","redirectDocument","response","ErrorResponseImpl","status","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","IDLE_FETCHER","IDLE_BLOCKER","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","router","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","historyAction","blockerKey","shouldBlockNavigation","updateBlocker","blockers","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","dispose","deleteFetcher","deleteBlocker","subscribe","newState","viewTransitionOpts","completedFetchers","deletedFetchersKeys","fetcher","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","actionData","mergeLoaderData","preventScrollReset","priorPaths","toPaths","getSavedScrollPosition","navigate","opts","normalizedPath","normalizeTo","submission","normalizeNavigateOptions","currentLocation","userReplace","revalidate","interruptActiveLoads","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","pendingError","findNearestBoundary","actionOutput","handleAction","getLoadingNavigation","shortCircuited","errors","handleLoaders","navigation","getSubmittingNavigation","actionMatch","getTargetMatch","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","overrideNavigation","fetcherSubmission","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","getFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","getDoneFetcher","doneFetcher","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","resolveDeferredData","_temp","redirectLocation","isDocumentReload","redirectHistoryAction","formMethod","formAction","formEncType","currentMatches","fetchersToLoad","resolveDeferredResults","deleteFetcherAndUpdateState","count","controller","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","_internalSetRoutes","newRoutes","UNSAFE_DEFERRED_SYMBOL","createStaticHandler","query","_temp2","requestContext","method","isValidMethod","methodNotAllowedMatches","queryImpl","isResponse","queryRoute","_temp3","_result$activeDeferre","routeMatch","submit","loadRouteData","e","isQueryRouteResponse","isRedirectResponse","isRouteRequest","context","loaderRequest","pendingActionError","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","getStaticContextFromError","isSubmissionNavigation","prependBasename","fromRouteId","relative","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","stripHashFromPath","text","name","searchParams","formData","convertFormDataToSearchParams","convertSearchParamsToFormData","boundaryId","boundaryMatches","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","type","resultType","onReject","runHandler","handler","abortPromise","handlerError","values","isSameBasename","contentType","isDeferredData","_result$init","_result$init2","statusCode","foundError","loaderHeaders","newLoaderData","mergedLoaderData","_temp4","errorMessage","deferred","obj","signals","isRevalidatingLoader","unwrap","pathMatches","_window","transitions","sessionPositions"],"sourceRoot":""}